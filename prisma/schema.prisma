generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Organization {
  id            String    @id @default(uuid())
  legal_name    String    @unique
  business_name String
  document      String    @unique
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  roles         Role[]
  websites      Website[]
  invoices      Invoice[]

  @@map("organizations")
}

model Role {
  id              String       @id @default(uuid())
  name            String
  description     String?
  organization_id String
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  users           User[]
  permissions     Permission[]

  organization Organization @relation(fields: [organization_id], references: [id])

  @@unique([name, organization_id]) // unique name per organization
  @@map("roles")
}

model User {
  id            String   @id @default(uuid())
  nickname      String
  email         String   @unique
  password_hash String
  is_active     Boolean  @default(true)
  role_id       String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  role    Role      @relation(fields: [role_id], references: [id])
  Payment Payment[]
  Invoice Invoice[]

  @@map("users")
}

model Website {
  id              String          @id @default(uuid())
  title           String
  domain          String          @unique
  organization_id String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  website_modules WebsiteModule[]

  organization Organization @relation(fields: [organization_id], references: [id])

  @@map("websites")
}

model WebsiteModule {
  id          String       @id @default(uuid())
  title       String       @unique
  slug        String       @unique
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  websites    Website[]
  permissions Permission[]

  @@map("website_modules")
}

model Permission {
  id                String   @id @default(uuid())
  title             String
  action            String
  website_module_id String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  roles             Role[]

  website_module WebsiteModule @relation(fields: [website_module_id], references: [id], onDelete: Cascade)

  @@map("permissions")
}

// enum InvoiceStatus {
//   PENDING
//   PAID
//   PARTIAL
// }

model Invoice {
  id              String    @id @default(uuid())
  amount          Decimal
  due_date        DateTime
  status          String    @default("PENDING") // SQLite
  // status         InvoiceStatus // Postgres
  organization_id String
  updated_user_id String    @default("c647282a-2899-4096-8484-9508112ab750")
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  payments        Payment[]

  organization Organization @relation(fields: [organization_id], references: [id])
  updated_by   User         @relation(fields: [updated_user_id], references: [id])

  @@map("invoices")
}

// enum PaymentStatus {
//   CASH
//   PIX
//   BANK_SLIP
//   CREDIT
//   DEBIT
//   OTHERS
// }

model Payment {
  id              String   @id @default(uuid())
  amount          Decimal
  payment_date    DateTime
  payment_method  String // SQLite
  // payment_method PaymentStatus // Postgres
  invoice_id      String
  updated_user_id String   @default("c647282a-2899-4096-8484-9508112ab750")
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  invoice    Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  updated_by User    @relation(fields: [updated_user_id], references: [id])

  @@map("payments")
}
